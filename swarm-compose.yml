services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - traefik

  frontend:
    image: elias007/mini-projet-conteneurisation:react-image
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`aseds.inpt.com`)"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"
        - "traefik.http.routers.frontend.entrypoints=web"
        - "traefik.http.routers.your-router.tls.certresolver=myresolver"
    networks:
      - traefik

  backend:
    image: elias007/mini-projet-conteneurisation:springboot-image
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.backend.rule=Host(`api.aseds.inpt.com`)"
        - "traefik.http.services.backend.loadbalancer.server.port=8080"
        - "traefik.http.routers.your-router.tls.certresolver=myresolver"
    networks:
      - traefik

volumes:
  db_data:
    driver: local

networks:
  traefik:
    external: true
    name: traefik
